- hosts: rpi
  vars:
    DEPS: [git]
    GO_DEPS:
      [
        "cloud.google.com/go/datastore",
        "github.com/gorilla/mux",
        "google.golang.org/appengine",
        "google.golang.org/appengine/log",
	      "github.com/dhowden/tag",
      ]
    deploy_path: /home/pi/web_view/server/app.yaml
    GOOGLE_APPLICATION_CREDENTIALS: /home/pi/web_view/rpi-server/key.json
  tasks:
    - name: Ensure /usr/local/go exists
      file:
        path: /usr/local/go
        state: directory
        owner: root
        group: staff
      become: yes
    - name: Download Golang
      get_url:
        url: https://dl.google.com/go/go1.8.linux-armv6l.tar.gz
        dest: /home/pi/go1.8.linux-armv6l.tar.gz
        mode: 0755
    - name: Install Golang
      unarchive:
        remote_src: yes
        src: /home/pi/go1.8.linux-armv6l.tar.gz
        dest: /usr/local/
      become: yes
    - name: Set Go Path
      lineinfile:
        path: /home/pi/.bashrc
        line: export PATH=$PATH:/usr/local/go/bin
    # Possibly reuse for localhost playbook on deployment
    # - name: Download SDK
    #   get_url:
    #     url: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-219.0.1-linux-x86.tar.gz
    #     dest: /home/pi/google-cloud-sdk-219.0.1-linux-x86.tar.gz
    #     mode: 0755
    # - name: Unzip SDK
    #   unarchive:
    #     remote_src: yes
    #     src: /home/pi/google-cloud-sdk-219.0.1-linux-x86.tar.gz
    #     dest: /home/pi/
    # - name: Install SDK
    #   shell: /home/pi/google-cloud-sdk/install.sh
    - name: Init SDK
      shell: /home/pi/google-cloud-sdk/bin/gcloud init
    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
    - name: Ensure all needed dependencies are updated
      apt:
        name: "{{ item }}"
        state: latest
      with_items: "{{DEPS}}"
      become: yes
    - name: Create Go Directory
      file:
        path: /home/pi/go
        state: directory
        owner: pi
        group: staff
      become: yes
    - name: Set GOPATH
      lineinfile:
        path: /home/pi/.bashrc
        line: 'export GOPATH=/home/pi/go'
    - name: Set GOOGLE_APPLICATION_CREDENTIALS
      lineinfile:
        path: /home/pi/.bashrc
        line: 'export GOOGLE_APPLICATION_CREDENTIALS=/home/pi/web_view/rpi-server/key.json'
    # Possibly reuse for localhost playbook on deployment
    # - name: Set DEPLOY_PATH
    #   lineinfile:
    #     path: /home/pi/.bashrc
    #     line: "export DEPLOY_PATH={{ deploy_path }}"
    - name: Ensure all golang dependencies are updated
      shell: "/usr/local/go/bin/go get -u {{ item }}"
      with_items: "{{GO_DEPS}}"
      become: yes
      environment:
        GOPATH: /home/pi/go
    - name: Check existing lightshow repo
      stat:
        path: /home/pi/lightshowpi
      register: lightshow_folder
    - name: Cloning Lightshowpi Repo
      git:
        repo: https://togiles@bitbucket.org/togiles/lightshowpi.git
        dest: /home/pi/lightshowpi
        version: stable
        accept_hostkey: yes
      become: yes
      when: lightshow_folder.stat.exists == False
    - name: Install Lightshow Pi
      shell: /home/pi/lightshowpi/install.sh
      when: lightshow_folder.stat.exists == False
    - name: Check Existing Web View exists
      stat:
        path: /home/pi/web_view
      register: web_view_folder
    - name: Cloning Web View Folder
      git:
        repo: https://github.com/BaReinhard/Hacktoberfest-Lightshowpi-public-song-gui.git
        dest: /home/pi/web_view
        version: master
        accept_hostkey: yes
      become: yes
      when: web_view_folder.stat.exists == False
    - name: Templating GCP Credentials
      template:
        src: templates/key.json.j2
        dest: /home/pi/web_view/rpi-server/key.json
        owner: pi
        group: staff
        mode: 0755
      become: yes
    # Possibly reuse for localhost playbook on deployment
    # - name: Templating GCP Credentials
    #   template:
    #     src: templates/key.json.j2
    #     dest: /home/pi/web_view/server/key.json
    #     owner: pi
    #     group: staff
    #     mode: 0755
    #   become: yes
    # Possibly reuse for localhost playbook on deployment
    # - name: Set Project ID
    #   shell: /usr/local/go/bin/go run /home/pi/web_view/bin/project/getProject.go
    #   register: PROJECT_ID
    #   environment:
    #     GOOGLE_APPLICATION_CREDENTIALS: /home/pi/web_view/rpi-server/key.json
    # - name: Set Email
    #   shell: /usr/local/go/bin/go run /home/pi/web_view/bin/email/getEmail.go
    #   register: CLIENT_EMAIL
    #   environment:
    #     GOOGLE_APPLICATION_CREDENTIALS: /home/pi/web_view/rpi-server/key.json
    # Possibly reuse for localhost playbook on deployment
    # - name: Templating app.yaml
    #   template:
    #     src: templates/app.yaml.j2
    #     dest: /home/pi/web_view/server/app.yaml
    #     owner: pi
    #     group: staff
    #     mode: 0755
    #   become: yes
    - name: Templating Set Song File
      template:
        src: templates/set-song.sh.j2
        dest: /usr/local/bin/set-song.sh
        owner: pi
        group: staff
        mode: a+x
      become: yes
    - name: Templating Start Show File
      template:
        src: templates/start_show.py
        dest: /usr/local/bin/start_show.sh
        owner: pi
        group: staff
        mode: a+x
      become: yes
    - name: Templating Stop Show File
      template:
        src: templates/stop_show.py
        dest: /usr/local/bin/stop_show.py
        owner: pi
        group: staff
        mode: a+x
      become: yes
    - name: Templating Default Configuration File
      template:
        src: templates/defaults.cfg.j2
        dest: /home/pi/lightshowpi/config/defaults.cfg
        owner: pi
        group: staff
        mode: 0755
      become: yes  
    # Possibly reuse for localhost playbook on deployment    
    # - name: Deploy Appengine Contents
    #   shell: "/home/pi/google-cloud-sdk/bin/gcloud config set project {{ PROJECT_ID.stdout }} && /home/pi/google-cloud-sdk/bin/gcloud auth activate-service-account {{ CLIENT_EMAIL.stdout }} --key-file={{ GOOGLE_APPLICATION_CREDENTIALS }} --project={{ PROJECT_ID.stdout }} && /home/pi/google-cloud-sdk/bin/gcloud app deploy {{ deploy_path }} --project={{ PROJECT_ID.stdout }}"
    #   environment:
    #     GOOGLE_APPLICATION_CREDENTIALS: /home/pi/web_view/rpi-server/key.json